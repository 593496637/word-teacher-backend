name: 🚀 Deploy to Cloudflare Workers (Hybrid Method)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # 手动触发功能
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: 🏗️ Build and Deploy Mastra Backend
    
    steps:
      # 📥 检出代码
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      # 🟢 设置 Node.js
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      # 📦 安装依赖
      - name: 📦 Install dependencies
        run: npm install
        
      # 🔧 类型检查
      - name: 🔧 Type check
        run: npx tsc --noEmit
        
      # 🏗️ 尝试 Mastra 构建
      - name: 🏗️ Try Mastra build
        id: mastra_build
        continue-on-error: true
        run: npx mastra build
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_EMAIL: ${{ secrets.CLOUDFLARE_API_EMAIL }}
          
      # 🚀 Mastra 部署（如果构建成功）
      - name: 🚀 Deploy using Mastra CLI
        if: steps.mastra_build.outcome == 'success' && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
        run: npx mastra deploy
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_EMAIL: ${{ secrets.CLOUDFLARE_API_EMAIL }}
          
      # 🔄 备用：使用 Wrangler 部署（如果 Mastra 构建失败）
      - name: 🔄 Fallback: Create simple Worker entry
        if: steps.mastra_build.outcome != 'success'
        run: |
          mkdir -p dist
          cat > dist/index.js << 'EOF'
          import { mastra } from '../src/mastra/index.ts';
          
          export default {
            async fetch(request, env, ctx) {
              // 简单的健康检查
              const url = new URL(request.url);
              
              if (url.pathname === '/api/health') {
                return new Response(JSON.stringify({ 
                  status: 'ok', 
                  service: 'word-teacher-backend',
                  timestamp: new Date().toISOString()
                }), {
                  headers: { 'Content-Type': 'application/json' }
                });
              }
              
              // 基本的单词教学 API
              if (url.pathname === '/api/agents/wordTeacher/generate' && request.method === 'POST') {
                const { messages } = await request.json();
                const lastMessage = messages[messages.length - 1];
                
                return new Response(JSON.stringify({
                  text: `Hello! I'm your word teacher. You said: "${lastMessage.content}". This is a simplified response while we set up the full system.`,
                  timestamp: new Date().toISOString()
                }), {
                  headers: { 
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type'
                  }
                });
              }
              
              return new Response('Word Teacher Backend - Cloudflare Workers', {
                headers: { 'Access-Control-Allow-Origin': '*' }
              });
            }
          };
          EOF
          
      # 🚀 备用：Wrangler 部署
      - name: 🚀 Fallback: Deploy using Wrangler
        if: steps.mastra_build.outcome != 'success' && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
          workingDirectory: .
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
      # 📄 上传构建产物
      - name: 📄 Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-files
          path: |
            .mastra/
            dist/
          retention-days: 7
