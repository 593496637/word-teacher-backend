name: 🚀 Deploy Mastra Backend to Cloudflare Workers

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # 手动触发功能
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_deploy:
        description: 'Force deployment even on PR'
        required: false
        default: false
        type: boolean

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: 🏗️ Build and Deploy Mastra Backend
    
    steps:
      # 📥 检出代码
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      # 🟢 设置 Node.js（固定版本以确保兼容性）
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      # 📦 清理并安装依赖
      - name: 📦 Clean install dependencies
        run: |
          echo "检查项目结构："
          ls -la
          echo "清理npm缓存和node_modules："
          npm cache clean --force
          rm -rf node_modules package-lock.json
          echo "重新安装依赖："
          npm install
          echo "验证安装结果："
          ls -la package*
        
      # 🔧 类型检查
      - name: 🔧 Type check
        run: npx tsc --noEmit
        
      # 🏗️ Mastra 构建
      - name: 🏗️ Build Mastra Application
        id: mastra_build
        run: |
          echo "=== 准备 Mastra 构建 ==="
          echo "检查 Node.js 环境："
          node --version
          npm --version
          echo "开始 Mastra 构建..."
          npx mastra build
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          NODE_ENV: production
          NODE_OPTIONS: "--experimental-global-webcrypto"
          
      # 📋 验证构建输出
      - name: 📋 Verify build output
        run: |
          echo "=== 构建后的项目结构 ==="
          ls -la
          echo ""
          echo "=== 检查 Mastra 构建输出 ==="
          if [ -d ".mastra/output" ]; then
            echo "✅ .mastra/output 目录存在"
            ls -la .mastra/output/
            echo ""
            echo "=== 验证关键文件 ==="
            if [ -f ".mastra/output/index.mjs" ]; then
              echo "✅ 入口文件存在: .mastra/output/index.mjs"
              echo "文件大小: $(du -h .mastra/output/index.mjs | cut -f1)"
              echo "文件前几行:"
              head -10 .mastra/output/index.mjs
            else
              echo "❌ 入口文件不存在: .mastra/output/index.mjs"
              exit 1
            fi
          else
            echo "❌ .mastra/output 目录不存在"
            echo "当前 .mastra 目录内容："
            ls -la .mastra/ || echo "❌ .mastra 目录也不存在"
            exit 1
          fi
          
      # 📄 上传构建产物
      - name: 📄 Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mastra-build-output
          path: |
            .mastra/output/
          retention-days: 7
          
      # 🚀 主要部署方案：使用 Mastra CLI
      - name: 🚀 Deploy using Mastra CLI
        id: mastra_deploy
        continue-on-error: true
        if: |
          (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
          (github.event_name == 'workflow_dispatch') ||
          (github.event_name == 'workflow_dispatch' && inputs.force_deploy == 'true')
        run: |
          echo "使用 Mastra CLI 部署到 Cloudflare Workers..."
          echo "验证环境变量："
          echo "CLOUDFLARE_ACCOUNT_ID: ${CLOUDFLARE_ACCOUNT_ID:0:8}..."
          echo "CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN:0:8}..."
          echo "OPENAI_API_KEY: ${OPENAI_API_KEY:0:8}..."
          echo "验证构建输出："
          ls -la .mastra/output/
          echo "开始部署..."
          npx mastra deploy --verbose
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          NODE_ENV: ${{ inputs.environment || 'production' }}
          
      # 🔧 备用部署方案：使用 Wrangler
      - name: 🔧 Backup Deploy with Wrangler
        if: |
          (steps.mastra_deploy.outcome != 'success') && (
            (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
            (github.event_name == 'workflow_dispatch') ||
            (github.event_name == 'workflow_dispatch' && inputs.force_deploy == 'true')
          )
        run: |
          echo "Mastra 部署失败，使用 Wrangler 备用方案..."
          echo "安装 Wrangler..."
          npm install -g wrangler@latest
          echo "验证 Wrangler 版本:"
          wrangler --version
          echo "验证构建文件..."
          if [ -f ".mastra/output/index.mjs" ]; then
            echo "✅ 构建文件存在，开始部署..."
            echo "验证 wrangler.toml 配置:"
            cat wrangler.toml
            echo ""
            echo "设置环境变量到 Worker..."
            echo "${{ secrets.OPENAI_API_KEY }}" | wrangler secret put OPENAI_API_KEY
            echo "使用 Wrangler 部署..."
            wrangler deploy --config wrangler.toml
          else
            echo "❌ 找不到构建文件，无法部署"
            exit 1
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      # ✅ 部署成功通知
      - name: ✅ Deployment Success
        if: |
          success() && (
            (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
            (github.event_name == 'workflow_dispatch')
          )
        run: |
          echo "🎉 部署成功！"
          echo "🌐 Worker URL: https://word-teacher-backend.你的账户名.workers.dev"
          echo "🔗 API 端点: https://word-teacher-backend.你的账户名.workers.dev/api/agents/wordTeacher"
          echo "📊 查看部署详情: https://dash.cloudflare.com"
          echo ""
          echo "🧪 测试你的 API："
          echo "curl https://word-teacher-backend.你的账户名.workers.dev/api/agents/wordTeacher"
          
      # ❌ 部署失败通知
      - name: ❌ Deployment Failed
        if: |
          failure() && (
            (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
            (github.event_name == 'workflow_dispatch')
          )
        run: |
          echo "❌ 部署失败！"
          echo "🔍 请检查以下内容："
          echo "1. Cloudflare API Token 和 Account ID 是否正确设置"
          echo "2. OpenAI API Key 是否有效"
          echo "3. 构建过程是否成功完成"
          echo "4. 查看上面的错误日志获取详细信息"
          echo ""
          echo "💡 常见解决方案："
          echo "- 检查 GitHub Secrets 配置"
          echo "- 验证 Cloudflare API Token 权限"
          echo "- 确认项目依赖版本兼容性"
          echo "- 尝试使用备用 Wrangler 部署方案"