name: 🚀 Deploy Mastra Backend to Cloudflare Workers

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # 手动触发功能
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: 🏗️ Build and Deploy Mastra Backend
    
    steps:
      # 📥 检出代码
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      # 🟢 设置 Node.js
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # 移除缓存配置以避免锁文件要求
          
      # 📦 清理并安装依赖
      - name: 📦 Clean install dependencies
        run: |
          echo "检查项目结构："
          ls -la
          echo "清理npm缓存和node_modules："
          npm cache clean --force
          rm -rf node_modules package-lock.json
          echo "重新安装依赖："
          npm install
          echo "验证安装结果："
          ls -la package*
          echo "验证crypto模块可用性："
          node -e "console.log('crypto module:', typeof require('crypto'))" || echo "crypto检查失败"
        
      # 🔧 类型检查
      - name: 🔧 Type check
        run: npx tsc --noEmit
        
      # 🏗️ Mastra 构建
      - name: 🏗️ Build Mastra Application
        run: |
          echo "=== 准备 Mastra 构建 ==="
          echo "检查 Node.js 环境："
          node --version
          npm --version
          echo "检查 crypto 模块："
          node -e "console.log('crypto available:', !!global.crypto || !!require('crypto'))"
          echo "检查环境变量："
          echo "NODE_ENV: $NODE_ENV"
          echo "开始 Mastra 构建..."
          echo "检查 Mastra CLI 版本："
          npx mastra --version || echo "无法获取版本信息"
          echo "运行构建命令："
          npx mastra build
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          NODE_ENV: production
          # 强制启用Node.js crypto模块兼容性
          NODE_OPTIONS: "--experimental-global-webcrypto"
          
      # 📋 验证构建输出
      - name: 📋 Verify build output
        run: |
          echo "=== 构建后的项目结构 ==="
          ls -la
          echo ""
          echo "=== 检查 .mastra 目录 ==="
          if [ -d ".mastra" ]; then
            echo "✅ .mastra 目录存在"
            ls -la .mastra/
            echo ""
            echo "=== .mastra 子目录内容 ==="
            find .mastra -type f | head -20
          else
            echo "❌ .mastra 目录不存在，构建可能失败"
            echo "检查是否有其他构建输出："
            find . -name "*.mjs" -o -name "dist" -o -name "build" | head -10
            exit 1
          fi
          
      # 🚀 部署到 Cloudflare Workers
      - name: 🚀 Deploy to Cloudflare Workers
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
          workingDirectory: .
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
      # 📄 上传构建产物
      - name: 📄 Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mastra-build-output
          path: |
            .mastra/
          retention-days: 7
          
      # ✅ 部署成功通知
      - name: ✅ Deployment Success
        if: success() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
        run: |
          echo "🎉 部署成功！"
          echo "🌐 Worker URL: https://word-teacher-backend.your-subdomain.workers.dev"
          echo "🔗 API 端点: https://word-teacher-backend.your-subdomain.workers.dev/api/agents/wordTeacher"